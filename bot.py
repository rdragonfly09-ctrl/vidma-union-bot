import os
import requests
from fastapi import FastAPI, Request, HTTPException, Header

BOT_TOKEN = os.environ["BOT_TOKEN"]
BASE_URL = os.environ["BASE_URL"].rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
ADMIN_ID = os.getenv("ADMIN_ID")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 6958136111

API = f"https://api.telegram.org/bot{BOT_TOKEN}"
app = FastAPI(title="Vidma Assistant")

# ---------- helpers ----------
def send(method: str, payload: dict):
    requests.post(f"{API}/{method}", json=payload, timeout=15)

def chat_action(chat_id: int, action="typing"):
    send("sendChatAction", {"chat_id": chat_id, "action": action})

def kb_main():
    return {
        "keyboard": [
            [{"text": "üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É"}],
            [{"text": "üîÆ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)"}],
            [{"text": "üïØ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"}],
            [{"text": "‚¨ÖÔ∏è –ú–µ–Ω—é"}],
        ],
        "resize_keyboard": True,
    }

def reply(chat_id: int, text: str):
    send("sendMessage", {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
        "reply_markup": kb_main()
    })

def set_webhook(url: str):
    payload = {"url": url}
    if WEBHOOK_SECRET:
        payload["secret_token"] = WEBHOOK_SECRET
    r = requests.post(f"{API}/setWebhook", json=payload, timeout=15)
    try:
        return r.json().get("ok", False)
    except Exception:
        return False

@app.on_event("startup")
def on_startup():
    wh = f"{BASE_URL}/webhook/{BOT_TOKEN}"
    if set_webhook(wh):
        print("Webhook set:", wh)
    else:
        print("Failed to set webhook")

def verify_secret(header_token):
    if not WEBHOOK_SECRET:
        return
    if header_token != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid secret token")

# ---------- handlers ----------
@app.post("/webhook/{token}")
async def webhook(token: str, request: Request,
                  x_telegram_bot_api_secret_token: str | None = Header(None)):
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Bad token")
    verify_secret(x_telegram_bot_api_secret_token)

    upd = await request.json()
    if "message" in upd:
        msg = upd["message"]
        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        username = msg["from"].get("username", "")
        name = (msg["from"].get("first_name","") + " " + msg["from"].get("last_name","")).strip()

        chat_action(chat_id)

        low = text.lower()

        if text.startswith("/start") or low == "‚¨ÖÔ∏è –º–µ–Ω—é":
            reply(chat_id,
                  "–í—ñ—Ç–∞—é! –Ø –∞—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
                  "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –º–∞–π—Å—Ç—Ä—É.")
            return {"ok": True}

        if "–ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É" in low:
            reply(chat_id,
                  "üìù <b>–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É</b>\n\n"
                  "–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
                  "‚Ä¢ –Ü–º‚Äô—è\n"
                  "‚Ä¢ @–Ω—ñ–∫ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å/–∫–∞–Ω–∞–ª\n"
                  "‚Ä¢ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/–Ω–∞–≤—á–∞–Ω–Ω—è/—ñ–Ω—à–µ)\n"
                  "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–∞–ø–∏—Ç—É.\n\n"
                  "–ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —è –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é.")
            return {"ok": True}

        if "–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–ø–∏—Å)" in low:
            reply(chat_id,
                  "üîÆ <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î</b>\n\n"
                  "‚Ä¢ –Ø –∑–±–∏—Ä–∞—é –∑–∞–ø–∏—Ç —ñ –ø–µ—Ä–µ–¥–∞—é –º–∞–π—Å—Ç—Ä—É.\n"
                  "‚Ä¢ –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äî –æ–ø–ª–∞—Ç–∞ —ñ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.\n"
                  "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ/—Ç–µ–∫—Å—Ç—É.\n\n"
                  "–•–æ—á–µ—à –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–ø–∏—Ç ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É¬ª.")
            return {"ok": True}

        if "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞" in low:
            reply(chat_id,
                  "üïØ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n\n"
                  "–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –æ–ø–ª–∞—Ç–∏ –π —Ç–µ—Ä–º—ñ–Ω—ñ–≤ ‚Äî –ø–∏—à–∏ —Ç—É—Ç. "
                  "–Ø –ø–µ—Ä–µ–¥–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")
            return {"ok": True}

        # –£–°–ï –Ü–ù–®–ï ‚Äî –≤–≤–∞–∂–∞—î–º–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º/–∑–∞—è–≤–∫–æ—é —Ç–∞ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
        if ADMIN_ID:
            info = (
                "üì© <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n"
                f"‚Ä¢ user: @{username or '‚Äî'} ({name or '‚Äî'})\n"
                f"‚Ä¢ chat_id: <code>{chat_id}</code>\n"
                f"‚Ä¢ text:\n{text}"
            )
            send("sendMessage", {"chat_id": int(ADMIN_ID), "text": info, "parse_mode": "HTML"})

        reply(chat_id, "–î—è–∫—É—é! –ó–∞—è–≤–∫—É/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üïØ")
    return {"ok": True}

@app.get("/")
def root():
    return {"status": "ok"}
